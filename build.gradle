plugins {
    id 'java'
}

subprojects {
    apply plugin: "maven-publish"

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/aleksandarsusnjar/paniql")

                afterEvaluate {
                    credentials {
                        username = System.getenv("GITHUB_ACTOR")
                        password = System.getenv("GITHUB_TOKEN")
                    }
                }
            }
        }
        afterEvaluate {
            publications {
                maven(MavenPublication) {
                    from components.java
                    pom {
                        licenses {
                            license {
                                name = "MIT License"
                                url = "https://opensource.org/license/mit/"
                            }
                            scm {
                                url = "https://github.com/aleksandarsusnjar/paniql"
                            }
                        }
                    }
                }
            }
        }
    }
}

// GitHub Actions environment variables
def gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
//def branchCommitCount = 'git rev-list --count HEAD'.execute().text.trim()
def totalCommitCount = 'git rev-list --count --all'.execute().text.trim()
def latestVersionTag = 'git describe --tags --match="version-*" HEAD'.execute().text.trim()
def latestVersionTagVersion = latestVersionTag.startsWith('version-') ? latestVersionTag.substring(8) : '0.1'
def buildNumber = System.getenv('BUILD_NUMBER') ?: System.getenv('TRAVIS_BUILD_NUMBER')

def isReleaseBranch = gitBranch.startsWith("release-")
def majorMinorVersion =  isReleaseBranch ? gitBranch.substring(8) : latestVersionTagVersion
def patchVersion = totalCommitCount

def buildSuffix = (buildNumber != null) ? ('.' + buildNumber) : '-SNAPSHOT'

allprojects {
    group = 'net.susnjar.paniql'
    version = majorMinorVersion + '.' + patchVersion + buildSuffix
}

task versionInfo {
    doLast {
        System.out.println('gitBranch:        ' + gitBranch)
        System.out.println('latestVersionTag: ' + latestVersionTag)
        System.out.println('totalCommitCount: ' + totalCommitCount)
        System.out.println('buildNumber:      ' + buildNumber)
        System.out.println('version:          ' + version)
    }
}

task envInfo {
    doLast {
        Map env = System.getenv();
        for (String name : env.keySet().toSorted()) {
            String uname = name.toUpperCase(); // just in case
            if (uname.contains("TOKEN") || uname.contains("PASSWORD") || uname.contains("SECRET")) {
                System.out.println(uname + ': <removed>')
            } else {
                System.out.println(uname + ': ' + env.get(name));
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.graphql-java:graphql-java:20.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.12.5'
    testImplementation 'com.squareup.okhttp3:okhttp:4.9.1'
}

test {
    useJUnitPlatform()
}


